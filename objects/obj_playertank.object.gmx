<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>tank_mask</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_tank</parentName>
  <maskName>tank_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>team = 0;
spd = 0.375;

invulnerable = 180;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>global.paused==0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hsp = -global.input[team,key_left] + global.input[team,key_right];
vsp = -global.input[team,key_up] + global.input[team,key_down];
current_pal = team+1;

    if global.input_pressed[team,key_b]{
    
    moreAmmo   = 1+(global.PowerUp[team]&amp;3&gt;=2)
    fasterAmmo =   global.PowerUp[team]&amp;3&gt;=1
    
    switch global.PowerUp[team]&gt;&gt;2 {
    case 1: // dual shot
        if shotsFired &lt; shotsMax*2*moreAmmo {
            audio_play_sound(snd_fire,0,0);
            for(i=-1;i&lt;=1;i+=2) {
            p = instance_create(x+4+i*(dir mod 2==1)*3,y+4+i*(dir mod 2==0)*3,obj_projectile);
            p.image_angle = dir*90;
            p.dir = dir;
            p.owner = id;
            p.spd = 1+fasterAmmo;
            p.team = team;
            shotsFired++;}
        } break;
    case 2: // sonic shot
        if shotsFired &lt; shotsMax*moreAmmo {
            audio_play_sound(snd_sonicwave,0,0);
            p = instance_create(x+4,y+4,obj_projectile);
            p.image_angle = dir*90;
            p.dir = dir;
            p.owner = id;
            p.spd = 1+fasterAmmo;
            p.team = team;
            p.type = projectile_sonic;
            shotsFired++;
        }  break;
    case 3: // quad shot
        if shotsFired &lt; shotsMax*4*moreAmmo {
            audio_play_sound(snd_fire,0,0);
            for(i=0;i&lt;4;i++) {
            p = instance_create(x+4,y+4,obj_projectile);
            p.image_angle = i*90; 
            p.dir = i; 
            p.owner = id;
            p.spd = 1+fasterAmmo;
            shotsFired++;            
            p.team = team;
            }
        }  break;
    case 4: // power shot
        if shotsFired &lt; shotsMax*moreAmmo {
            audio_play_sound(snd_fire,0,0);
            p = instance_create(x+4,y+4,obj_projectile);
            p.image_angle = dir*90;
            p.spd = 1+fasterAmmo;
            p.dir = dir;
            p.owner = id;
            p.team = team;
            p.type = projectile_steelbreaking;
            shotsFired++;
        }  break;                        
    default: 
        if shotsFired &lt; shotsMax*moreAmmo {
            audio_play_sound(snd_fire,0,0);
            p = instance_create(x+4,y+4,obj_projectile);
            p.image_angle = dir*90;
            p.dir = dir;
            p.owner = id;
            p.team = team;
            p.spd = 1+fasterAmmo;
            shotsFired++;
        }
    }
    
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pal_swap_set(my_pal_sprite,current_pal,false);
    draw_sprite_ext(spr_tankchassis,global.PowerUp[team]&amp;3,floor(x)+4,floor(y)+4,1,1,dir*90,image_blend,image_alpha);
    draw_sprite_ext(spr_parts,img mod 2,floor(x)+4,floor(y)+4,1,1,dir*90,image_blend,image_alpha);    
    draw_sprite_ext(spr_tankcannon,global.PowerUp[team]&gt;&gt;2,floor(x)+4,floor(y)+4,1,1,dir*90,image_blend,image_alpha);    
pal_swap_reset();

/*
t = (point_direction(mouse_x,mouse_y,x,y)+225) mod 360 div 90

draw_text_colour(x,y,string(t)+" "+string(point_direction(mouse_x,mouse_y,x,y))+"#"+string_format((point_direction(mouse_x,mouse_y,x,y)+225) mod 360,3,0),c_white,c_white,c_white,c_white,1)
*/
if invulnerable and global.timer mod 2 == 0
    draw_sprite_ext(spr_invulnerable,global.timer mod 8 div 4,floor(x)+4,floor(y)+4,1,1,dir*90,image_blend,image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
