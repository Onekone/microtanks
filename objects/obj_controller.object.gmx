<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dpadDirection = -1;
dpadPressed = -1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>round_clear_timer = 0;
respawn_timer = 0;
respawn_base = 190;
respawn_perlevel = 4;
respawn_perplayer = 20;

keyboard_alpha = 0;
idle = 0;

for(i=0;i&lt;5;i++) {
 mb_pressed[i] = 0
 mb_released[i] = 0
 mb_input[i] = 0;    
    mb_x[i] = 0;
    mb_y[i] = 0;     
}


    ww=window_get_width(); hh=window_get_height();
    tw = tileSize*boardSize+32; th = tileSize*boardSize+16;
    scrUpdateRender();
    __x = display_get_gui_width();
    __y = display_get_gui_height();

    virtual_buttons_place()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(i=0;i&lt;global.players;i++)
 for(j=0;j&lt;8;j++) {
   global.input_pressed[i,j]=keyboard_check_pressed(global.input_key[i,j]);
   global.input[i,j]=keyboard_check(global.input_key[i,j]);
 }

if global.paused == 0 or global.paused == 1
for(i=0;i&lt;global.players;i++)
    if global.input_pressed[i,key_start] {
        if global.paused {
            audio_resume_all();
        }
        else {
            audio_pause_all();
            audio_play_sound(snd_pause,0,0);
        }
        global.paused = !global.paused;
    }
     
 
if os_type == os_android 
{
    for(i=0;i&lt;5;i++) {
     t = device_mouse_check_button(i,mb_left);
     mb_inputpress[i] = t&amp;(mb_input[i]);
     mb_input[i] = t;
     
     mb_x[i] = device_mouse_x(i);
     mb_y[i] = device_mouse_y(i);  
     mb_gui_x[i] = device_mouse_x_to_gui(i);
     mb_gui_y[i] = device_mouse_y_to_gui(i);
    }
    
    if (dpadPressed&lt;0) {
        for(i=0;i&lt;5;i++) {
            if mb_inputpress[i] and point_distance(_dpadX,_dpadY,mb_gui_x[i],mb_gui_y[i])&lt;40 {
                dpadPressed = i;
                t = (point_direction(_dpadX,_dpadY,mb_gui_x[dpadPressed],mb_gui_y[dpadPressed])+45) mod 360 div 90;
                if (t!=dpadDirection) {
                    global.input_pressed[0,t] = global.input_pressed[0,t]|1;
                };
                global.input[0,t] = global.input[0,t]|1;            
                break;
                };
        };
    } else {
        if !mb_input[dpadPressed] {
            dpadPressed = -1;
            dpadDirection = -1;
        }
        else {
            t = (point_direction(_dpadX,_dpadY,mb_gui_x[dpadPressed],mb_gui_y[dpadPressed])+45) mod 360 div 90;
            if (t!=dpadDirection) {
                global.input_pressed[0,t] = global.input_pressed[0,t]|1;
                dpadDirection = t;
            }
            global.input[0,t] = global.input[0,t]|1;
        }
    }
};


for(i=0;i&lt;8;i++) {
 if global.input[0,i]
    idle = 0;
}
    idle++;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// window

ww=max(window_get_width(),1); hh=max(window_get_height(),1);

visible = 1;

engine = 0;

if global.paused==0 &amp;&amp; instance_number(obj_playertank)&gt;0
for(i=0;i&lt;global.players &amp;&amp; !engine;i++)
 for(j=0;j&lt;4 &amp;&amp; !engine;j++)
  engine = engine|global.input[i,j];
  
audio_sound_gain(global.engine_sound_active,engine==1,0);
audio_sound_gain(global.engine_sound_idle,(!engine &amp;&amp; round_clear_timer&lt;=0 &amp;&amp; global.paused==0 &amp;&amp; instance_number(obj_playertank)&gt;0),0);

if(ww != view_wport || hh != view_hport) {
    
    tw = tileSize*boardSize+32; th = tileSize*boardSize+16;
    scrUpdateRender();
    __x = display_get_gui_width();
    __y = display_get_gui_height();
    
    virtual_buttons_delete();
    virtual_buttons_place();                  
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.wrapping_timer++;

global.wrapping_timer = global.wrapping_timer mod (16384);

if global.wrapping_timer mod 128 == 0
    tile_layer_show(2)
else if global.wrapping_timer mod 128 == 64
    tile_layer_hide(2)

if instance_exists(obj_construction)
    tile_layer_show(4);
else
    tile_layer_hide(4);
    

if global.paused == 2 or idle &gt; 120 {
    keyboard_alpha = lerp(keyboard_alpha,0,0.1);
}
else keyboard_alpha = lerp(keyboard_alpha,1,0.1);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>global.paused == 0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.timer++;
global.TimeStop--;
global.BunkerUp--;

if global.BunkerUp&gt;=0 
    if global.BunkerUp&lt;=300 and global.BunkerUp mod 16 == 0 {    
    with obj_defensetarget {
            var _k = tile_steel;
            if global.BunkerUp div 16 mod 2 == 0 _k = tile_brick;
            var _x = x div 8, _y = y div 8;
            for(i=-1;i&lt;3;i++) {
             tile_replace(_x+i,_y-1,_k);
             tile_replace(_x+i,_y+2,_k);
             tile_replace(_x-1,_y+i,_k);
             tile_replace(_x+2,_y+i,_k);
             }
        }
}

if round_clear_timer&gt;0 {
    round_clear_timer--;
    if round_clear_timer&lt;=0
        instance_create(0,0,trif(global.RoundStatus != round_editor,obj_countdown,obj_construction));
}

if respawn_timer&lt;0 {
    if instance_number(obj_tankspawner)&gt;0 {
        var respawnSpot = instance_find(obj_tankspawner,irandom(instance_number(obj_tankspawner)-1))
        p = instance_create(respawnSpot.x,respawnSpot.y,obj_tankappear);        
    }
    else
        p = instance_create(80,0,obj_tankappear);        

        p.tank = obj_enemytank;
        var t = global.tankSet[| 20-global.EnemiesLeft]&gt;&gt;1;
        p.type = t;
        switch t {
        case 0: p.p_spd = 1; p.spd = 0.25; p.hp = 0; p.scoreValue = 100; break;
        case 1: p.p_spd = 1; p.spd = 0.50; p.hp = 0; p.scoreValue = 200; break;
        case 2: p.p_spd = 2; p.spd = 0.25; p.hp = 0; p.scoreValue = 300; break;
        case 3: p.p_spd = 1; p.spd = 0.25; p.hp = 3; p.scoreValue = 400; break;
        }
        if global.tankSet[| 20-global.EnemiesLeft]&amp;1
            p.bonusItems = 1;
            
    respawn_timer = respawn_base - respawn_perlevel*global.Round - respawn_perplayer*global.players;
    global.EnemiesLeft--;
}
else if instance_number(obj_enemytank)+instance_number(obj_tankappear)&lt;4 and global.EnemiesLeft&gt;0 respawn_timer--;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.engine_sound_active = audio_play_sound(snd_engineactive,9999,1)
global.engine_sound_idle   = audio_play_sound(snd_engineidle,9999,1)
audio_sound_gain(global.engine_sound_active,0,0)
audio_sound_gain(global.engine_sound_idle,0,0)

for(i=0;i&lt;4;i++) {
    global.Score[i] = 0;
    global.Lives[i] = 3;
    global.PowerUp[i] = 0;
    global.ExtraTankScore[i] = 20000;                                            
    
    for(j=0;j&lt;4;j++) {
     global.TotalKills[i,j]=0;
     global.RoundKills[i,j]=0; 
     }
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(global.fontMini)draw_set_halign(fa_left)draw_set_valign(fa_top);
draw_text_ext_colour(0,6,string(fps)+":"+string(fps_real),6,160,p_white,p_white,p_white,p_white,1);
//draw_text_ext_colour(0,0,string(surface_get_width(application_surface))+"X"+string(surface_get_height(application_surface)),6,160,p_white,p_white,p_white,p_white,1);
//draw_text_ext_colour(0,6,string(window_get_width())+"X"+string(window_get_height()),6,160,p_white,p_white,p_white,p_white,1);



if os_type == os_android {
    draw_text_colour(0,0,string(fps)+"#"+string(fps_real),p_white,p_white,p_white,p_white,1)

    draw_sprite_ext(sprite_keys,6+global.input[0,key_down]  , _dpadX   , _dpadY+24,3,3,0,c_white,0.33*keyboard_alpha)    
    draw_sprite_ext(sprite_keys,global.input[0,key_left]    , _dpadX-24, _dpadY   ,3,3,0,c_white,0.33*keyboard_alpha)
    draw_sprite_ext(sprite_keys,2+global.input[0,key_right] , _dpadX+24, _dpadY   ,3,3,0,c_white,0.33*keyboard_alpha)
    draw_sprite_ext(sprite_keys,4+global.input[0,key_up]    , _dpadX   , _dpadY-24,3,3,0,c_white,0.33*keyboard_alpha)
    
    draw_sprite_ext(sprite_keys,14+global.input[0,key_select]    , _selX, _selY,3,3,0,c_white,0.33*keyboard_alpha)
    draw_sprite_ext(sprite_keys,12+global.input[0,key_start]    , _startX   , _startY,3,3,0,c_white,0.33*keyboard_alpha)        
    
    draw_sprite_ext(sprite_keys,10+global.input[0,key_a]   , _abX-18 , _abY,3,3,0,c_white,0.33*keyboard_alpha)        
    draw_sprite_ext(sprite_keys,8+global.input[0,key_b]    , _abX+18 , _abY,3,3,0,c_white,0.33*keyboard_alpha)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DRAW HUD
if global.paused&lt;2
{

  
draw_set_font(global.fontNormal)

draw_set_halign(fa_center) draw_set_valign(fa_middle)

if global.paused == 1 and global.wrapping_timer mod 64 &lt; 32 {
draw_text_colour(65,65,"PAUSE",0,0,0,0,1)
draw_text_colour(64,64,"PAUSE",p_red,p_red,p_red,p_red,1) }
 
   draw_set_halign(fa_left) draw_set_valign(fa_top)

    draw_text_colour(128,0,"EN
"+string_format(global.EnemiesLeft,2,0),p_white,p_white,p_white,p_white,1)

for(i=0;i&lt;global.players;i++) {

    draw_text_colour(128,24+24*i,string(i+1)+"P",global.PlayerColor[i],global.PlayerColor[i],global.PlayerColor[i],global.PlayerColor[i],1)
    
    if global.Lives[i]&lt;10 {
    pal_swap_set(palette_tank,i+1,false);
        draw_sprite(spr_tankchassis,0,132,36+24*i)
        draw_sprite(spr_tankcannon,0,132,36+24*i)
        draw_sprite(spr_parts,0,132,36+24*i)
    pal_swap_reset();    
    }
    draw_text_colour(128,32+24*i,string_format(max(global.Lives[i],0),2,0),p_white,p_white,p_white,p_white,1)    
    }
    draw_text_colour(128,120,"R.
"+string_format(global.Round+1,2,0),p_white,p_white,p_white,p_white,1);
}   
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
